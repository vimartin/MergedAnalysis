// -*- C++ -*-
#ifndef aa_H
#define aa_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with the command
// makeCMS3ClassFiles("", "nominal", "aa", "tas", "events")

using namespace std; 
class aa {
private: 
protected: 
	unsigned int index;
	float	weight_mc_;
	TBranch *weight_mc_branch;
	bool weight_mc_isLoaded;
	float	weight_pileup_;
	TBranch *weight_pileup_branch;
	bool weight_pileup_isLoaded;
	float	weight_leptonSF_;
	TBranch *weight_leptonSF_branch;
	bool weight_leptonSF_isLoaded;
	float	weight_bTagSF_;
	TBranch *weight_bTagSF_branch;
	bool weight_bTagSF_isLoaded;
	float	weight_leptonSF_EL_SF_Trigger_UP_;
	TBranch *weight_leptonSF_EL_SF_Trigger_UP_branch;
	bool weight_leptonSF_EL_SF_Trigger_UP_isLoaded;
	float	weight_leptonSF_EL_SF_Trigger_DOWN_;
	TBranch *weight_leptonSF_EL_SF_Trigger_DOWN_branch;
	bool weight_leptonSF_EL_SF_Trigger_DOWN_isLoaded;
	float	weight_leptonSF_EL_SF_Reco_UP_;
	TBranch *weight_leptonSF_EL_SF_Reco_UP_branch;
	bool weight_leptonSF_EL_SF_Reco_UP_isLoaded;
	float	weight_leptonSF_EL_SF_Reco_DOWN_;
	TBranch *weight_leptonSF_EL_SF_Reco_DOWN_branch;
	bool weight_leptonSF_EL_SF_Reco_DOWN_isLoaded;
	float	weight_leptonSF_EL_SF_ID_UP_;
	TBranch *weight_leptonSF_EL_SF_ID_UP_branch;
	bool weight_leptonSF_EL_SF_ID_UP_isLoaded;
	float	weight_leptonSF_EL_SF_ID_DOWN_;
	TBranch *weight_leptonSF_EL_SF_ID_DOWN_branch;
	bool weight_leptonSF_EL_SF_ID_DOWN_isLoaded;
	float	weight_leptonSF_EL_SF_Isol_UP_;
	TBranch *weight_leptonSF_EL_SF_Isol_UP_branch;
	bool weight_leptonSF_EL_SF_Isol_UP_isLoaded;
	float	weight_leptonSF_EL_SF_Isol_DOWN_;
	TBranch *weight_leptonSF_EL_SF_Isol_DOWN_branch;
	bool weight_leptonSF_EL_SF_Isol_DOWN_isLoaded;
	float	weight_leptonSF_MU_SF_Trigger_STAT_UP_;
	TBranch *weight_leptonSF_MU_SF_Trigger_STAT_UP_branch;
	bool weight_leptonSF_MU_SF_Trigger_STAT_UP_isLoaded;
	float	weight_leptonSF_MU_SF_Trigger_STAT_DOWN_;
	TBranch *weight_leptonSF_MU_SF_Trigger_STAT_DOWN_branch;
	bool weight_leptonSF_MU_SF_Trigger_STAT_DOWN_isLoaded;
	float	weight_leptonSF_MU_SF_Trigger_SYST_UP_;
	TBranch *weight_leptonSF_MU_SF_Trigger_SYST_UP_branch;
	bool weight_leptonSF_MU_SF_Trigger_SYST_UP_isLoaded;
	float	weight_leptonSF_MU_SF_Trigger_SYST_DOWN_;
	TBranch *weight_leptonSF_MU_SF_Trigger_SYST_DOWN_branch;
	bool weight_leptonSF_MU_SF_Trigger_SYST_DOWN_isLoaded;
	float	weight_leptonSF_MU_SF_ID_STAT_UP_;
	TBranch *weight_leptonSF_MU_SF_ID_STAT_UP_branch;
	bool weight_leptonSF_MU_SF_ID_STAT_UP_isLoaded;
	float	weight_leptonSF_MU_SF_ID_STAT_DOWN_;
	TBranch *weight_leptonSF_MU_SF_ID_STAT_DOWN_branch;
	bool weight_leptonSF_MU_SF_ID_STAT_DOWN_isLoaded;
	float	weight_leptonSF_MU_SF_ID_SYST_UP_;
	TBranch *weight_leptonSF_MU_SF_ID_SYST_UP_branch;
	bool weight_leptonSF_MU_SF_ID_SYST_UP_isLoaded;
	float	weight_leptonSF_MU_SF_ID_SYST_DOWN_;
	TBranch *weight_leptonSF_MU_SF_ID_SYST_DOWN_branch;
	bool weight_leptonSF_MU_SF_ID_SYST_DOWN_isLoaded;
	float	weight_leptonSF_MU_SF_Isol_UP_;
	TBranch *weight_leptonSF_MU_SF_Isol_UP_branch;
	bool weight_leptonSF_MU_SF_Isol_UP_isLoaded;
	float	weight_leptonSF_MU_SF_Isol_DOWN_;
	TBranch *weight_leptonSF_MU_SF_Isol_DOWN_branch;
	bool weight_leptonSF_MU_SF_Isol_DOWN_isLoaded;
	float	weight_indiv_SF_EL_Trigger_;
	TBranch *weight_indiv_SF_EL_Trigger_branch;
	bool weight_indiv_SF_EL_Trigger_isLoaded;
	float	weight_indiv_SF_EL_Trigger_UP_;
	TBranch *weight_indiv_SF_EL_Trigger_UP_branch;
	bool weight_indiv_SF_EL_Trigger_UP_isLoaded;
	float	weight_indiv_SF_EL_Trigger_DOWN_;
	TBranch *weight_indiv_SF_EL_Trigger_DOWN_branch;
	bool weight_indiv_SF_EL_Trigger_DOWN_isLoaded;
	float	weight_indiv_SF_EL_Reco_;
	TBranch *weight_indiv_SF_EL_Reco_branch;
	bool weight_indiv_SF_EL_Reco_isLoaded;
	float	weight_indiv_SF_EL_Reco_UP_;
	TBranch *weight_indiv_SF_EL_Reco_UP_branch;
	bool weight_indiv_SF_EL_Reco_UP_isLoaded;
	float	weight_indiv_SF_EL_Reco_DOWN_;
	TBranch *weight_indiv_SF_EL_Reco_DOWN_branch;
	bool weight_indiv_SF_EL_Reco_DOWN_isLoaded;
	float	weight_indiv_SF_EL_ID_;
	TBranch *weight_indiv_SF_EL_ID_branch;
	bool weight_indiv_SF_EL_ID_isLoaded;
	float	weight_indiv_SF_EL_ID_UP_;
	TBranch *weight_indiv_SF_EL_ID_UP_branch;
	bool weight_indiv_SF_EL_ID_UP_isLoaded;
	float	weight_indiv_SF_EL_ID_DOWN_;
	TBranch *weight_indiv_SF_EL_ID_DOWN_branch;
	bool weight_indiv_SF_EL_ID_DOWN_isLoaded;
	float	weight_indiv_SF_EL_Isol_;
	TBranch *weight_indiv_SF_EL_Isol_branch;
	bool weight_indiv_SF_EL_Isol_isLoaded;
	float	weight_indiv_SF_EL_Isol_UP_;
	TBranch *weight_indiv_SF_EL_Isol_UP_branch;
	bool weight_indiv_SF_EL_Isol_UP_isLoaded;
	float	weight_indiv_SF_EL_Isol_DOWN_;
	TBranch *weight_indiv_SF_EL_Isol_DOWN_branch;
	bool weight_indiv_SF_EL_Isol_DOWN_isLoaded;
	float	weight_indiv_SF_MU_Trigger_;
	TBranch *weight_indiv_SF_MU_Trigger_branch;
	bool weight_indiv_SF_MU_Trigger_isLoaded;
	float	weight_indiv_SF_MU_Trigger_STAT_UP_;
	TBranch *weight_indiv_SF_MU_Trigger_STAT_UP_branch;
	bool weight_indiv_SF_MU_Trigger_STAT_UP_isLoaded;
	float	weight_indiv_SF_MU_Trigger_STAT_DOWN_;
	TBranch *weight_indiv_SF_MU_Trigger_STAT_DOWN_branch;
	bool weight_indiv_SF_MU_Trigger_STAT_DOWN_isLoaded;
	float	weight_indiv_SF_MU_Trigger_SYST_UP_;
	TBranch *weight_indiv_SF_MU_Trigger_SYST_UP_branch;
	bool weight_indiv_SF_MU_Trigger_SYST_UP_isLoaded;
	float	weight_indiv_SF_MU_Trigger_SYST_DOWN_;
	TBranch *weight_indiv_SF_MU_Trigger_SYST_DOWN_branch;
	bool weight_indiv_SF_MU_Trigger_SYST_DOWN_isLoaded;
	float	weight_indiv_SF_MU_ID_;
	TBranch *weight_indiv_SF_MU_ID_branch;
	bool weight_indiv_SF_MU_ID_isLoaded;
	float	weight_indiv_SF_MU_ID_STAT_UP_;
	TBranch *weight_indiv_SF_MU_ID_STAT_UP_branch;
	bool weight_indiv_SF_MU_ID_STAT_UP_isLoaded;
	float	weight_indiv_SF_MU_ID_STAT_DOWN_;
	TBranch *weight_indiv_SF_MU_ID_STAT_DOWN_branch;
	bool weight_indiv_SF_MU_ID_STAT_DOWN_isLoaded;
	float	weight_indiv_SF_MU_ID_SYST_UP_;
	TBranch *weight_indiv_SF_MU_ID_SYST_UP_branch;
	bool weight_indiv_SF_MU_ID_SYST_UP_isLoaded;
	float	weight_indiv_SF_MU_ID_SYST_DOWN_;
	TBranch *weight_indiv_SF_MU_ID_SYST_DOWN_branch;
	bool weight_indiv_SF_MU_ID_SYST_DOWN_isLoaded;
	float	weight_indiv_SF_MU_Isol_;
	TBranch *weight_indiv_SF_MU_Isol_branch;
	bool weight_indiv_SF_MU_Isol_isLoaded;
	float	weight_indiv_SF_MU_Isol_UP_;
	TBranch *weight_indiv_SF_MU_Isol_UP_branch;
	bool weight_indiv_SF_MU_Isol_UP_isLoaded;
	float	weight_indiv_SF_MU_Isol_DOWN_;
	TBranch *weight_indiv_SF_MU_Isol_DOWN_branch;
	bool weight_indiv_SF_MU_Isol_DOWN_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_B_up_;
	TBranch *weight_bTagSF_eigenvars_B_up_branch;
	bool weight_bTagSF_eigenvars_B_up_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_C_up_;
	TBranch *weight_bTagSF_eigenvars_C_up_branch;
	bool weight_bTagSF_eigenvars_C_up_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_Light_up_;
	TBranch *weight_bTagSF_eigenvars_Light_up_branch;
	bool weight_bTagSF_eigenvars_Light_up_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_B_down_;
	TBranch *weight_bTagSF_eigenvars_B_down_branch;
	bool weight_bTagSF_eigenvars_B_down_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_C_down_;
	TBranch *weight_bTagSF_eigenvars_C_down_branch;
	bool weight_bTagSF_eigenvars_C_down_isLoaded;
	vector<float> *weight_bTagSF_eigenvars_Light_down_;
	TBranch *weight_bTagSF_eigenvars_Light_down_branch;
	bool weight_bTagSF_eigenvars_Light_down_isLoaded;
	float	weight_bTagSF_extrapolation_up_;
	TBranch *weight_bTagSF_extrapolation_up_branch;
	bool weight_bTagSF_extrapolation_up_isLoaded;
	float	weight_bTagSF_extrapolation_down_;
	TBranch *weight_bTagSF_extrapolation_down_branch;
	bool weight_bTagSF_extrapolation_down_isLoaded;
	float	weight_bTagSF_extrapolation_from_charm_up_;
	TBranch *weight_bTagSF_extrapolation_from_charm_up_branch;
	bool weight_bTagSF_extrapolation_from_charm_up_isLoaded;
	float	weight_bTagSF_extrapolation_from_charm_down_;
	TBranch *weight_bTagSF_extrapolation_from_charm_down_branch;
	bool weight_bTagSF_extrapolation_from_charm_down_isLoaded;
	unsigned int	eventNumber_;
	TBranch *eventNumber_branch;
	bool eventNumber_isLoaded;
	unsigned int	runNumber_;
	TBranch *runNumber_branch;
	bool runNumber_isLoaded;
	unsigned int	mcChannelNumber_;
	TBranch *mcChannelNumber_branch;
	bool mcChannelNumber_isLoaded;
	float	mu_;
	TBranch *mu_branch;
	bool mu_isLoaded;
	vector<float> *el_pt_;
	TBranch *el_pt_branch;
	bool el_pt_isLoaded;
	vector<float> *el_eta_;
	TBranch *el_eta_branch;
	bool el_eta_isLoaded;
	vector<float> *el_phi_;
	TBranch *el_phi_branch;
	bool el_phi_isLoaded;
	vector<float> *el_e_;
	TBranch *el_e_branch;
	bool el_e_isLoaded;
	vector<float> *el_charge_;
	TBranch *el_charge_branch;
	bool el_charge_isLoaded;
	vector<float> *el_topoetcone20_;
	TBranch *el_topoetcone20_branch;
	bool el_topoetcone20_isLoaded;
	vector<float> *el_ptvarcone20_;
	TBranch *el_ptvarcone20_branch;
	bool el_ptvarcone20_isLoaded;
	vector<float> *mu_pt_;
	TBranch *mu_pt_branch;
	bool mu_pt_isLoaded;
	vector<float> *mu_eta_;
	TBranch *mu_eta_branch;
	bool mu_eta_isLoaded;
	vector<float> *mu_phi_;
	TBranch *mu_phi_branch;
	bool mu_phi_isLoaded;
	vector<float> *mu_e_;
	TBranch *mu_e_branch;
	bool mu_e_isLoaded;
	vector<float> *mu_charge_;
	TBranch *mu_charge_branch;
	bool mu_charge_isLoaded;
	vector<float> *mu_topoetcone20_;
	TBranch *mu_topoetcone20_branch;
	bool mu_topoetcone20_isLoaded;
	vector<float> *mu_ptvarcone30_;
	TBranch *mu_ptvarcone30_branch;
	bool mu_ptvarcone30_isLoaded;
	vector<float> *jet_pt_;
	TBranch *jet_pt_branch;
	bool jet_pt_isLoaded;
	vector<float> *jet_eta_;
	TBranch *jet_eta_branch;
	bool jet_eta_isLoaded;
	vector<float> *jet_phi_;
	TBranch *jet_phi_branch;
	bool jet_phi_isLoaded;
	vector<float> *jet_e_;
	TBranch *jet_e_branch;
	bool jet_e_isLoaded;
	vector<float> *jet_mv1_;
	TBranch *jet_mv1_branch;
	bool jet_mv1_isLoaded;
	vector<float> *jet_mvb_;
	TBranch *jet_mvb_branch;
	bool jet_mvb_isLoaded;
	vector<float> *jet_mv1c_;
	TBranch *jet_mv1c_branch;
	bool jet_mv1c_isLoaded;
	vector<float> *jet_mv2c00_;
	TBranch *jet_mv2c00_branch;
	bool jet_mv2c00_isLoaded;
	vector<float> *jet_mv2c10_;
	TBranch *jet_mv2c10_branch;
	bool jet_mv2c10_isLoaded;
	vector<float> *jet_mv2c20_;
	TBranch *jet_mv2c20_branch;
	bool jet_mv2c20_isLoaded;
	vector<float> *jet_ip3dsv1_;
	TBranch *jet_ip3dsv1_branch;
	bool jet_ip3dsv1_isLoaded;
	vector<float> *jet_jvt_;
	TBranch *jet_jvt_branch;
	bool jet_jvt_isLoaded;
	vector<float> *ljet_pt_;
	TBranch *ljet_pt_branch;
	bool ljet_pt_isLoaded;
	vector<float> *ljet_eta_;
	TBranch *ljet_eta_branch;
	bool ljet_eta_isLoaded;
	vector<float> *ljet_phi_;
	TBranch *ljet_phi_branch;
	bool ljet_phi_isLoaded;
	vector<float> *ljet_e_;
	TBranch *ljet_e_branch;
	bool ljet_e_isLoaded;
	vector<float> *ljet_m_;
	TBranch *ljet_m_branch;
	bool ljet_m_isLoaded;
	vector<float> *ljet_sd12_;
	TBranch *ljet_sd12_branch;
	bool ljet_sd12_isLoaded;
	float	met_met_;
	TBranch *met_met_branch;
	bool met_met_isLoaded;
	float	met_phi_;
	TBranch *met_phi_branch;
	bool met_phi_isLoaded;
	int	sub_1b_2fj_;
	TBranch *sub_1b_2fj_branch;
	bool sub_1b_2fj_isLoaded;
	int	sub_1b_3fj_;
	TBranch *sub_1b_3fj_branch;
	bool sub_1b_3fj_isLoaded;
	int	sub_1b_allfj_;
	TBranch *sub_1b_allfj_branch;
	bool sub_1b_allfj_isLoaded;
	float	TotalEventWeight_;
	TBranch *TotalEventWeight_branch;
	bool TotalEventWeight_isLoaded;
	float	EventParticleWeight_;
	TBranch *EventParticleWeight_branch;
	bool EventParticleWeight_isLoaded;
	float	ScaleFactorWeight_;
	TBranch *ScaleFactorWeight_branch;
	bool ScaleFactorWeight_isLoaded;
	float	EventParameterWeight_;
	TBranch *EventParameterWeight_branch;
	bool EventParameterWeight_isLoaded;
	float	HT_;
	TBranch *HT_branch;
	bool HT_isLoaded;
	float	HhadT_;
	TBranch *HhadT_branch;
	bool HhadT_isLoaded;
	float	HT_ratio_met_;
	TBranch *HT_ratio_met_branch;
	bool HT_ratio_met_isLoaded;
	float	HT_ratio_lep_;
	TBranch *HT_ratio_lep_branch;
	bool HT_ratio_lep_isLoaded;
	float	meff_;
	TBranch *meff_branch;
	bool meff_isLoaded;
	float	Centrality_;
	TBranch *Centrality_branch;
	bool Centrality_isLoaded;
	float	MetSignificance_;
	TBranch *MetSignificance_branch;
	bool MetSignificance_isLoaded;
	float	MT2reco_;
	TBranch *MT2reco_branch;
	bool MT2reco_isLoaded;
	float	MCTreco_;
	TBranch *MCTreco_branch;
	bool MCTreco_isLoaded;
	float	dPhimin_met_jet_;
	TBranch *dPhimin_met_jet_branch;
	bool dPhimin_met_jet_isLoaded;
	float	dPhimin_met_lep_;
	TBranch *dPhimin_met_lep_branch;
	bool dPhimin_met_lep_isLoaded;
	float	dPhisumjetmet_;
	TBranch *dPhisumjetmet_branch;
	bool dPhisumjetmet_isLoaded;
	float	dPhisumjetlep_;
	TBranch *dPhisumjetlep_branch;
	bool dPhisumjetlep_isLoaded;
	float	dPhisumjetmetlep_;
	TBranch *dPhisumjetmetlep_branch;
	bool dPhisumjetmetlep_isLoaded;
	float	dRlj_MindR_;
	TBranch *dRlj_MindR_branch;
	bool dRlj_MindR_isLoaded;
	float	Mbb_MindR_;
	TBranch *Mbb_MindR_branch;
	bool Mbb_MindR_isLoaded;
	float	Mjj_MaxPt_;
	TBranch *Mjj_MaxPt_branch;
	bool Mjj_MaxPt_isLoaded;
	float	Mjjj_MaxPt_;
	TBranch *Mjjj_MaxPt_branch;
	bool Mjjj_MaxPt_isLoaded;
	float	Mbbb_MaxPt_;
	TBranch *Mbbb_MaxPt_branch;
	bool Mbbb_MaxPt_isLoaded;
	float	Mjjjj_MaxPt_;
	TBranch *Mjjjj_MaxPt_branch;
	bool Mjjjj_MaxPt_isLoaded;
	float	Mbbbb_MaxPt_;
	TBranch *Mbbbb_MaxPt_branch;
	bool Mbbbb_MaxPt_isLoaded;
	float	Mbbbj_MaxPt_;
	TBranch *Mbbbj_MaxPt_branch;
	bool Mbbbj_MaxPt_isLoaded;
	float	Mjjj_MaxMV2c20_;
	TBranch *Mjjj_MaxMV2c20_branch;
	bool Mjjj_MaxMV2c20_isLoaded;
	float	Mbbb_MaxMV2c20_;
	TBranch *Mbbb_MaxMV2c20_branch;
	bool Mbbb_MaxMV2c20_isLoaded;
	float	Mjjjj_MaxMV2c20_;
	TBranch *Mjjjj_MaxMV2c20_branch;
	bool Mjjjj_MaxMV2c20_isLoaded;
	float	Mbbbb_MaxMV2c20_;
	TBranch *Mbbbb_MaxMV2c20_branch;
	bool Mbbbb_MaxMV2c20_isLoaded;
	float	Mbbbj_MaxMV2c20_;
	TBranch *Mbbbj_MaxMV2c20_branch;
	bool Mbbbj_MaxMV2c20_isLoaded;
	float	DeltaMbbbb_MinDeltaM_;
	TBranch *DeltaMbbbb_MinDeltaM_branch;
	bool DeltaMbbbb_MinDeltaM_isLoaded;
	float	dR_lep_jet1_;
	TBranch *dR_lep_jet1_branch;
	bool dR_lep_jet1_isLoaded;
	float	dPhibl_MindPhi_;
	TBranch *dPhibl_MindPhi_branch;
	bool dPhibl_MindPhi_isLoaded;
	float	dRbl_MindR_;
	TBranch *dRbl_MindR_branch;
	bool dRbl_MindR_isLoaded;
	float	dPhibb_MindPhi_;
	TBranch *dPhibb_MindPhi_branch;
	bool dPhibb_MindPhi_isLoaded;
	float	dRbb_MindR_;
	TBranch *dRbb_MindR_branch;
	bool dRbb_MindR_isLoaded;
	float	PtDiff_Higgs_Vector_;
	TBranch *PtDiff_Higgs_Vector_branch;
	bool PtDiff_Higgs_Vector_isLoaded;
	int	el_n_;
	TBranch *el_n_branch;
	bool el_n_isLoaded;
	int	el_MT_;
	TBranch *el_MT_branch;
	bool el_MT_isLoaded;
	int	el_M_;
	TBranch *el_M_branch;
	bool el_M_isLoaded;
	int	mu_n_;
	TBranch *mu_n_branch;
	bool mu_n_isLoaded;
	int	mu_MT_;
	TBranch *mu_MT_branch;
	bool mu_MT_isLoaded;
	int	mu_M_;
	TBranch *mu_M_branch;
	bool mu_M_isLoaded;
	int	lep_n_;
	TBranch *lep_n_branch;
	bool lep_n_isLoaded;
	int	jet_n_;
	TBranch *jet_n_branch;
	bool jet_n_isLoaded;
	int	jet20_n_;
	TBranch *jet20_n_branch;
	bool jet20_n_isLoaded;
	int	jet30_n_;
	TBranch *jet30_n_branch;
	bool jet30_n_isLoaded;
	int	jet40_n_;
	TBranch *jet40_n_branch;
	bool jet40_n_isLoaded;
	int	bjet_n_;
	TBranch *bjet_n_branch;
	bool bjet_n_isLoaded;
	int	ljet_n_;
	TBranch *ljet_n_branch;
	bool ljet_n_isLoaded;
	vector<float> *ljet_width_;
	TBranch *ljet_width_branch;
	bool ljet_width_isLoaded;
	vector<float> *ljet_tau1_;
	TBranch *ljet_tau1_branch;
	bool ljet_tau1_isLoaded;
	vector<float> *ljet_tau2_;
	TBranch *ljet_tau2_branch;
	bool ljet_tau2_isLoaded;
	vector<float> *ljet_tau3_;
	TBranch *ljet_tau3_branch;
	bool ljet_tau3_isLoaded;
	vector<float> *ljet_tau1_wta_;
	TBranch *ljet_tau1_wta_branch;
	bool ljet_tau1_wta_isLoaded;
	vector<float> *ljet_tau2_wta_;
	TBranch *ljet_tau2_wta_branch;
	bool ljet_tau2_wta_isLoaded;
	vector<float> *ljet_tau3_wta_;
	TBranch *ljet_tau3_wta_branch;
	bool ljet_tau3_wta_isLoaded;
	vector<float> *ljet_planarFlow_;
	TBranch *ljet_planarFlow_branch;
	bool ljet_planarFlow_isLoaded;
	vector<float> *ljet_ktsplit12_;
	TBranch *ljet_ktsplit12_branch;
	bool ljet_ktsplit12_isLoaded;
	vector<float> *ljet_ktsplit23_;
	TBranch *ljet_ktsplit23_branch;
	bool ljet_ktsplit23_isLoaded;
	vector<float> *ljet_ktsplit34_;
	TBranch *ljet_ktsplit34_branch;
	bool ljet_ktsplit34_isLoaded;
	vector<float> *ljet_ZCut12_;
	TBranch *ljet_ZCut12_branch;
	bool ljet_ZCut12_isLoaded;
	vector<float> *ljet_ZCut23_;
	TBranch *ljet_ZCut23_branch;
	bool ljet_ZCut23_isLoaded;
	vector<float> *ljet_ZCut34_;
	TBranch *ljet_ZCut34_branch;
	bool ljet_ZCut34_isLoaded;
	vector<float> *ljet_KtDR_;
	TBranch *ljet_KtDR_branch;
	bool ljet_KtDR_isLoaded;
	vector<float> *ljet_Angularity_;
	TBranch *ljet_Angularity_branch;
	bool ljet_Angularity_isLoaded;
	vector<float> *ljet_Aplanarity_;
	TBranch *ljet_Aplanarity_branch;
	bool ljet_Aplanarity_isLoaded;
	vector<float> *ljet_Dip12_;
	TBranch *ljet_Dip12_branch;
	bool ljet_Dip12_isLoaded;
	vector<float> *ljet_Dip13_;
	TBranch *ljet_Dip13_branch;
	bool ljet_Dip13_isLoaded;
	vector<float> *ljet_Dip23_;
	TBranch *ljet_Dip23_branch;
	bool ljet_Dip23_isLoaded;
	vector<float> *ljet_D2_;
	TBranch *ljet_D2_branch;
	bool ljet_D2_isLoaded;
	vector<float> *ljet_C2_;
	TBranch *ljet_C2_branch;
	bool ljet_C2_isLoaded;
	vector<float> *ljet_tau21_;
	TBranch *ljet_tau21_branch;
	bool ljet_tau21_isLoaded;
	vector<float> *ljet_tau32_;
	TBranch *ljet_tau32_branch;
	bool ljet_tau32_isLoaded;
	vector<float> *ljet_tau31_;
	TBranch *ljet_tau31_branch;
	bool ljet_tau31_isLoaded;
	vector<float> *ljet_tau21_wta_;
	TBranch *ljet_tau21_wta_branch;
	bool ljet_tau21_wta_isLoaded;
	vector<float> *ljet_tau32_wta_;
	TBranch *ljet_tau32_wta_branch;
	bool ljet_tau32_wta_isLoaded;
	vector<float> *ljet_tau31_wta_;
	TBranch *ljet_tau31_wta_branch;
	bool ljet_tau31_wta_isLoaded;
	vector<int> *jet_truth_matching_;
	TBranch *jet_truth_matching_branch;
	bool jet_truth_matching_isLoaded;
	vector<int> *boosted_jet_truth_matching_;
	TBranch *boosted_jet_truth_matching_branch;
	bool boosted_jet_truth_matching_isLoaded;
	vector<int> *boosted_trackjet_truth_matching_;
	TBranch *boosted_trackjet_truth_matching_branch;
	bool boosted_trackjet_truth_matching_isLoaded;
	int	truth_nbquarks_;
	TBranch *truth_nbquarks_branch;
	bool truth_nbquarks_isLoaded;
	vector<int> *nbtag_tjets_truth_;
	TBranch *nbtag_tjets_truth_branch;
	bool nbtag_tjets_truth_isLoaded;
	vector<int> *nbtag_tjets_reco_;
	TBranch *nbtag_tjets_reco_branch;
	bool nbtag_tjets_reco_isLoaded;
	vector<int> *n_tjets_fat_;
	TBranch *n_tjets_fat_branch;
	bool n_tjets_fat_isLoaded;
	vector<int> *n_btjets_bfat_;
	TBranch *n_btjets_bfat_branch;
	bool n_btjets_bfat_isLoaded;
	vector<int> *n_btjets_fat_;
	TBranch *n_btjets_fat_branch;
	bool n_btjets_fat_isLoaded;
	vector<int> *n_tbtjets_fat_;
	TBranch *n_tbtjets_fat_branch;
	bool n_tbtjets_fat_isLoaded;
	vector<int> *n_tjets_subfat_;
	TBranch *n_tjets_subfat_branch;
	bool n_tjets_subfat_isLoaded;
	vector<float> *leadfat_leadtrack_pt_;
	TBranch *leadfat_leadtrack_pt_branch;
	bool leadfat_leadtrack_pt_isLoaded;
	vector<float> *leadfat_subtrack_pt_;
	TBranch *leadfat_subtrack_pt_branch;
	bool leadfat_subtrack_pt_isLoaded;
	float	higgs_mass_;
	TBranch *higgs_mass_branch;
	bool higgs_mass_isLoaded;
	vector<float> *b_pt_;
	TBranch *b_pt_branch;
	bool b_pt_isLoaded;
	vector<float> *notj_fj_pt_;
	TBranch *notj_fj_pt_branch;
	bool notj_fj_pt_isLoaded;
	vector<int> *n_1tbtjets_fat_;
	TBranch *n_1tbtjets_fat_branch;
	bool n_1tbtjets_fat_isLoaded;
	vector<int> *n_2tbtjets_fat_;
	TBranch *n_2tbtjets_fat_branch;
	bool n_2tbtjets_fat_isLoaded;
	vector<int> *n_1inc_tbtjets_fat_;
	TBranch *n_1inc_tbtjets_fat_branch;
	bool n_1inc_tbtjets_fat_isLoaded;
	vector<int> *n_2inc_tbtjets_fat_;
	TBranch *n_2inc_tbtjets_fat_branch;
	bool n_2inc_tbtjets_fat_isLoaded;
	vector<vector<int> > *trub_track_jets_;
	TBranch *trub_track_jets_branch;
	bool trub_track_jets_isLoaded;
	vector<vector<bool> > *tagb_track_jets_;
	TBranch *tagb_track_jets_branch;
	bool tagb_track_jets_isLoaded;
	int	nb_;
	TBranch *nb_branch;
	bool nb_isLoaded;
	vector<vector<int> > *trub_2track_jets_;
	TBranch *trub_2track_jets_branch;
	bool trub_2track_jets_isLoaded;
	vector<int> *btj_;
	TBranch *btj_branch;
	bool btj_isLoaded;
	vector<int> *tj_j_;
	TBranch *tj_j_branch;
	bool tj_j_isLoaded;
	vector<int> *btj_j_;
	TBranch *btj_j_branch;
	bool btj_j_isLoaded;
	vector<int> *b_j_;
	TBranch *b_j_branch;
	bool b_j_isLoaded;
	vector<int> *bh_j_;
	TBranch *bh_j_branch;
	bool bh_j_isLoaded;
	vector<float> *j_pt_;
	TBranch *j_pt_branch;
	bool j_pt_isLoaded;
	vector<float> *trackjet_pt_;
	TBranch *trackjet_pt_branch;
	bool trackjet_pt_isLoaded;
	vector<float> *dr_matched_jet_pt_;
	TBranch *dr_matched_jet_pt_branch;
	bool dr_matched_jet_pt_isLoaded;
	vector<vector<float> > *dr_matched_trackjet_pt_;
	TBranch *dr_matched_trackjet_pt_branch;
	bool dr_matched_trackjet_pt_isLoaded;
	vector<bool> *b_tag_jet_;
	TBranch *b_tag_jet_branch;
	bool b_tag_jet_isLoaded;
	vector<float> *fj_pt_;
	TBranch *fj_pt_branch;
	bool fj_pt_isLoaded;
	vector<int> *label_jet_;
	TBranch *label_jet_branch;
	bool label_jet_isLoaded;
	vector<vector<bool> > *btag_trackjet_;
	TBranch *btag_trackjet_branch;
	bool btag_trackjet_isLoaded;
	vector<vector<int> > *label_trackjet_;
	TBranch *label_trackjet_branch;
	bool label_trackjet_isLoaded;
	vector<int> *tj_fj_;
	TBranch *tj_fj_branch;
	bool tj_fj_isLoaded;
	vector<int> *bpart_fj_;
	TBranch *bpart_fj_branch;
	bool bpart_fj_isLoaded;
	vector<int> *label_fj_;
	TBranch *label_fj_branch;
	bool label_fj_isLoaded;
	vector<vector<float> > *ghost_dr_fj_;
	TBranch *ghost_dr_fj_branch;
	bool ghost_dr_fj_isLoaded;
	vector<vector<float> > *drmatch_dr_fj_;
	TBranch *drmatch_dr_fj_branch;
	bool drmatch_dr_fj_isLoaded;
	vector<vector<int> > *label_trackjet_fj_;
	TBranch *label_trackjet_fj_branch;
	bool label_trackjet_fj_isLoaded;
	vector<vector<bool> > *btag_trackjet_fj_;
	TBranch *btag_trackjet_fj_branch;
	bool btag_trackjet_fj_isLoaded;
	vector<int> *ghost_tj_fj_;
	TBranch *ghost_tj_fj_branch;
	bool ghost_tj_fj_isLoaded;
	vector<vector<float> > *fj_dr_matched_trackjet_pt_;
	TBranch *fj_dr_matched_trackjet_pt_branch;
	bool fj_dr_matched_trackjet_pt_isLoaded;
	vector<float> *tj_pt_check_;
	TBranch *tj_pt_check_branch;
	bool tj_pt_check_isLoaded;
	vector<float> *caloCluster_pt_;
	TBranch *caloCluster_pt_branch;
	bool caloCluster_pt_isLoaded;
	vector<float> *caloCluster_px_;
	TBranch *caloCluster_px_branch;
	bool caloCluster_px_isLoaded;
	vector<float> *caloCluster_py_;
	TBranch *caloCluster_py_branch;
	bool caloCluster_py_isLoaded;
	vector<float> *caloCluster_pz_;
	TBranch *caloCluster_pz_branch;
	bool caloCluster_pz_isLoaded;
	vector<float> *caloCluster_E_;
	TBranch *caloCluster_E_branch;
	bool caloCluster_E_isLoaded;
	vector<float> *caloCluster_EM_PROBABILITY_;
	TBranch *caloCluster_EM_PROBABILITY_branch;
	bool caloCluster_EM_PROBABILITY_isLoaded;
	vector<float> *caloCluster_ENG_BAD_CELLS_;
	TBranch *caloCluster_ENG_BAD_CELLS_branch;
	bool caloCluster_ENG_BAD_CELLS_isLoaded;
	vector<float> *caloCluster_ENG_FRAC_MAX_;
	TBranch *caloCluster_ENG_FRAC_MAX_branch;
	bool caloCluster_ENG_FRAC_MAX_isLoaded;
	vector<float> *caloCluster_ENG_POS_;
	TBranch *caloCluster_ENG_POS_branch;
	bool caloCluster_ENG_POS_isLoaded;
	vector<float> *caloCluster_FIRST_ENG_DES_;
	TBranch *caloCluster_FIRST_ENG_DES_branch;
	bool caloCluster_FIRST_ENG_DES_isLoaded;
	vector<float> *caloCluster_ISOLATION_;
	TBranch *caloCluster_ISOLATION_branch;
	bool caloCluster_ISOLATION_isLoaded;
	vector<float> *caloCluster_LATERAL_;
	TBranch *caloCluster_LATERAL_branch;
	bool caloCluster_LATERAL_isLoaded;
	vector<float> *caloCluster_LONGITUDINAL_;
	TBranch *caloCluster_LONGITUDINAL_branch;
	bool caloCluster_LONGITUDINAL_isLoaded;
	vector<float> *caloCluster_N_BAD_CELLS_;
	TBranch *caloCluster_N_BAD_CELLS_branch;
	bool caloCluster_N_BAD_CELLS_isLoaded;
	vector<float> *caloCluster_SECOND_LAMBDA_;
	TBranch *caloCluster_SECOND_LAMBDA_branch;
	bool caloCluster_SECOND_LAMBDA_isLoaded;
	vector<float> *caloCluster_SECOND_R_;
	TBranch *caloCluster_SECOND_R_branch;
	bool caloCluster_SECOND_R_isLoaded;
	vector<float> *caloCluster_SIGNIFICANCE_;
	TBranch *caloCluster_SIGNIFICANCE_branch;
	bool caloCluster_SIGNIFICANCE_isLoaded;
	vector<float> *caloCluster_altE_;
	TBranch *caloCluster_altE_branch;
	bool caloCluster_altE_isLoaded;
	vector<float> *caloCluster_altEta_;
	TBranch *caloCluster_altEta_branch;
	bool caloCluster_altEta_isLoaded;
	vector<float> *caloCluster_altM_;
	TBranch *caloCluster_altM_branch;
	bool caloCluster_altM_isLoaded;
	vector<float> *caloCluster_altPhi_;
	TBranch *caloCluster_altPhi_branch;
	bool caloCluster_altPhi_isLoaded;
	vector<float> *caloCluster_calE_;
	TBranch *caloCluster_calE_branch;
	bool caloCluster_calE_isLoaded;
	vector<float> *caloCluster_calEta_;
	TBranch *caloCluster_calEta_branch;
	bool caloCluster_calEta_isLoaded;
	vector<float> *caloCluster_calM_;
	TBranch *caloCluster_calM_branch;
	bool caloCluster_calM_isLoaded;
	vector<float> *caloCluster_calPhi_;
	TBranch *caloCluster_calPhi_branch;
	bool caloCluster_calPhi_isLoaded;
	vector<unsigned int> *caloCluster_clusterSize_;
	TBranch *caloCluster_clusterSize_branch;
	bool caloCluster_clusterSize_isLoaded;
	vector<float> *caloCluster_rawE_;
	TBranch *caloCluster_rawE_branch;
	bool caloCluster_rawE_isLoaded;
	vector<float> *caloCluster_rawEta_;
	TBranch *caloCluster_rawEta_branch;
	bool caloCluster_rawEta_isLoaded;
	vector<float> *caloCluster_rawM_;
	TBranch *caloCluster_rawM_branch;
	bool caloCluster_rawM_isLoaded;
	vector<float> *caloCluster_rawPhi_;
	TBranch *caloCluster_rawPhi_branch;
	bool caloCluster_rawPhi_isLoaded;
	vector<float> *caloCluster_time_;
	TBranch *caloCluster_time_branch;
	bool caloCluster_time_isLoaded;
	vector<float> *caloCluster_AVG_LAR_Q_;
	TBranch *caloCluster_AVG_LAR_Q_branch;
	bool caloCluster_AVG_LAR_Q_isLoaded;
	vector<float> *caloCluster_AVG_TILE_Q_;
	TBranch *caloCluster_AVG_TILE_Q_branch;
	bool caloCluster_AVG_TILE_Q_isLoaded;
	vector<float> *caloCluster_BADLARQ_;
	TBranch *caloCluster_BADLARQ_branch;
	bool caloCluster_BADLARQ_isLoaded;
	vector<float> *caloCluster_CELL_SIGNIFICANCE_;
	TBranch *caloCluster_CELL_SIGNIFICANCE_branch;
	bool caloCluster_CELL_SIGNIFICANCE_isLoaded;
	vector<float> *caloCluster_CELL_SIG_SAMPLING_;
	TBranch *caloCluster_CELL_SIG_SAMPLING_branch;
	bool caloCluster_CELL_SIG_SAMPLING_isLoaded;
	vector<float> *caloCluster_CENTER_LAMBDA_;
	TBranch *caloCluster_CENTER_LAMBDA_branch;
	bool caloCluster_CENTER_LAMBDA_isLoaded;
	vector<float> *caloCluster_CENTER_MAG_;
	TBranch *caloCluster_CENTER_MAG_branch;
	bool caloCluster_CENTER_MAG_isLoaded;
	vector<float> *track_pt_;
	TBranch *track_pt_branch;
	bool track_pt_isLoaded;
	vector<float> *track_px_;
	TBranch *track_px_branch;
	bool track_px_isLoaded;
	vector<float> *track_py_;
	TBranch *track_py_branch;
	bool track_py_isLoaded;
	vector<float> *track_pz_;
	TBranch *track_pz_branch;
	bool track_pz_isLoaded;
	vector<float> *track_E_;
	TBranch *track_E_branch;
	bool track_E_isLoaded;
	vector<float> *track_vz_;
	TBranch *track_vz_branch;
	bool track_vz_isLoaded;
	vector<float> *track_z0_;
	TBranch *track_z0_branch;
	bool track_z0_isLoaded;
	vector<float> *track_phi_;
	TBranch *track_phi_branch;
	bool track_phi_isLoaded;
	vector<unsigned char> *track_expectInnermostPixelLayerHit_;
	TBranch *track_expectInnermostPixelLayerHit_branch;
	bool track_expectInnermostPixelLayerHit_isLoaded;
	vector<unsigned char> *track_expectNextToInnermostPixelLayerHit_;
	TBranch *track_expectNextToInnermostPixelLayerHit_branch;
	bool track_expectNextToInnermostPixelLayerHit_isLoaded;
	vector<unsigned char> *track_numberOfInnermostPixelLayerHits_;
	TBranch *track_numberOfInnermostPixelLayerHits_branch;
	bool track_numberOfInnermostPixelLayerHits_isLoaded;
	vector<unsigned char> *track_numberOfNextToInnermostPixelLayerHits_;
	TBranch *track_numberOfNextToInnermostPixelLayerHits_branch;
	bool track_numberOfNextToInnermostPixelLayerHits_isLoaded;
	vector<float> *track_chiSquared_;
	TBranch *track_chiSquared_branch;
	bool track_chiSquared_isLoaded;
	vector<float> *track_d0_;
	TBranch *track_d0_branch;
	bool track_d0_isLoaded;
	vector<unsigned char> *track_numberOfPixelSharedHits_;
	TBranch *track_numberOfPixelSharedHits_branch;
	bool track_numberOfPixelSharedHits_isLoaded;
	vector<float> *track_numberDoF_;
	TBranch *track_numberDoF_branch;
	bool track_numberDoF_isLoaded;
	vector<unsigned char> *track_numberOfSCTSharedHits_;
	TBranch *track_numberOfSCTSharedHits_branch;
	bool track_numberOfSCTSharedHits_isLoaded;
	vector<unsigned char> *track_numberOfPhiHoleLayers_;
	TBranch *track_numberOfPhiHoleLayers_branch;
	bool track_numberOfPhiHoleLayers_isLoaded;
	vector<unsigned char> *track_numberOfPhiLayers_;
	TBranch *track_numberOfPhiLayers_branch;
	bool track_numberOfPhiLayers_isLoaded;
	vector<unsigned char> *track_numberOfPixelDeadSensors_;
	TBranch *track_numberOfPixelDeadSensors_branch;
	bool track_numberOfPixelDeadSensors_isLoaded;
	vector<unsigned char> *track_numberOfPixelHits_;
	TBranch *track_numberOfPixelHits_branch;
	bool track_numberOfPixelHits_isLoaded;
	vector<unsigned char> *track_numberOfPrecisionLayers_;
	TBranch *track_numberOfPrecisionLayers_branch;
	bool track_numberOfPrecisionLayers_isLoaded;
	vector<unsigned char> *track_numberOfSCTDeadSensors_;
	TBranch *track_numberOfSCTDeadSensors_branch;
	bool track_numberOfSCTDeadSensors_isLoaded;
	vector<unsigned char> *track_numberOfSCTHits_;
	TBranch *track_numberOfSCTHits_branch;
	bool track_numberOfSCTHits_isLoaded;
	vector<unsigned char> *track_numberOfSCTHoles_;
	TBranch *track_numberOfSCTHoles_branch;
	bool track_numberOfSCTHoles_isLoaded;
	vector<unsigned char> *track_numberOfTRTHits_;
	TBranch *track_numberOfTRTHits_branch;
	bool track_numberOfTRTHits_isLoaded;
	vector<unsigned char> *track_numberOfTRTOutliers_;
	TBranch *track_numberOfTRTOutliers_branch;
	bool track_numberOfTRTOutliers_isLoaded;
	vector<float> *track_qOverp_;
	TBranch *track_qOverp_branch;
	bool track_qOverp_isLoaded;
	vector<float> *track_theta_;
	TBranch *track_theta_branch;
	bool track_theta_isLoaded;
	vector<float> *track_vertex_x_;
	TBranch *track_vertex_x_branch;
	bool track_vertex_x_isLoaded;
	vector<float> *track_vertex_y_;
	TBranch *track_vertex_y_branch;
	bool track_vertex_y_isLoaded;
	vector<float> *track_vertex_z_;
	TBranch *track_vertex_z_branch;
	bool track_vertex_z_isLoaded;
	vector<short> *track_vertex_type_;
	TBranch *track_vertex_type_branch;
	bool track_vertex_type_isLoaded;
	vector<float> *primary_vertex_x_;
	TBranch *primary_vertex_x_branch;
	bool primary_vertex_x_isLoaded;
	vector<float> *primary_vertex_y_;
	TBranch *primary_vertex_y_branch;
	bool primary_vertex_y_isLoaded;
	vector<float> *primary_vertex_z_;
	TBranch *primary_vertex_z_branch;
	bool primary_vertex_z_isLoaded;
	vector<short> *primary_vertex_type_;
	TBranch *primary_vertex_type_branch;
	bool primary_vertex_type_isLoaded;
	vector<float> *a_pt_;
	TBranch *a_pt_branch;
	bool a_pt_isLoaded;
	vector<float> *mc_pt_;
	TBranch *mc_pt_branch;
	bool mc_pt_isLoaded;
	vector<float> *mc_eta_;
	TBranch *mc_eta_branch;
	bool mc_eta_isLoaded;
	vector<float> *mc_phi_;
	TBranch *mc_phi_branch;
	bool mc_phi_isLoaded;
	vector<float> *mc_e_;
	TBranch *mc_e_branch;
	bool mc_e_isLoaded;
	vector<int> *mc_pdgId_;
	TBranch *mc_pdgId_branch;
	bool mc_pdgId_isLoaded;
	vector<int> *mc_status_;
	TBranch *mc_status_branch;
	bool mc_status_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
	const float &weight_mc();
	const float &weight_pileup();
	const float &weight_leptonSF();
	const float &weight_bTagSF();
	const float &weight_leptonSF_EL_SF_Trigger_UP();
	const float &weight_leptonSF_EL_SF_Trigger_DOWN();
	const float &weight_leptonSF_EL_SF_Reco_UP();
	const float &weight_leptonSF_EL_SF_Reco_DOWN();
	const float &weight_leptonSF_EL_SF_ID_UP();
	const float &weight_leptonSF_EL_SF_ID_DOWN();
	const float &weight_leptonSF_EL_SF_Isol_UP();
	const float &weight_leptonSF_EL_SF_Isol_DOWN();
	const float &weight_leptonSF_MU_SF_Trigger_STAT_UP();
	const float &weight_leptonSF_MU_SF_Trigger_STAT_DOWN();
	const float &weight_leptonSF_MU_SF_Trigger_SYST_UP();
	const float &weight_leptonSF_MU_SF_Trigger_SYST_DOWN();
	const float &weight_leptonSF_MU_SF_ID_STAT_UP();
	const float &weight_leptonSF_MU_SF_ID_STAT_DOWN();
	const float &weight_leptonSF_MU_SF_ID_SYST_UP();
	const float &weight_leptonSF_MU_SF_ID_SYST_DOWN();
	const float &weight_leptonSF_MU_SF_Isol_UP();
	const float &weight_leptonSF_MU_SF_Isol_DOWN();
	const float &weight_indiv_SF_EL_Trigger();
	const float &weight_indiv_SF_EL_Trigger_UP();
	const float &weight_indiv_SF_EL_Trigger_DOWN();
	const float &weight_indiv_SF_EL_Reco();
	const float &weight_indiv_SF_EL_Reco_UP();
	const float &weight_indiv_SF_EL_Reco_DOWN();
	const float &weight_indiv_SF_EL_ID();
	const float &weight_indiv_SF_EL_ID_UP();
	const float &weight_indiv_SF_EL_ID_DOWN();
	const float &weight_indiv_SF_EL_Isol();
	const float &weight_indiv_SF_EL_Isol_UP();
	const float &weight_indiv_SF_EL_Isol_DOWN();
	const float &weight_indiv_SF_MU_Trigger();
	const float &weight_indiv_SF_MU_Trigger_STAT_UP();
	const float &weight_indiv_SF_MU_Trigger_STAT_DOWN();
	const float &weight_indiv_SF_MU_Trigger_SYST_UP();
	const float &weight_indiv_SF_MU_Trigger_SYST_DOWN();
	const float &weight_indiv_SF_MU_ID();
	const float &weight_indiv_SF_MU_ID_STAT_UP();
	const float &weight_indiv_SF_MU_ID_STAT_DOWN();
	const float &weight_indiv_SF_MU_ID_SYST_UP();
	const float &weight_indiv_SF_MU_ID_SYST_DOWN();
	const float &weight_indiv_SF_MU_Isol();
	const float &weight_indiv_SF_MU_Isol_UP();
	const float &weight_indiv_SF_MU_Isol_DOWN();
	const vector<float> &weight_bTagSF_eigenvars_B_up();
	const vector<float> &weight_bTagSF_eigenvars_C_up();
	const vector<float> &weight_bTagSF_eigenvars_Light_up();
	const vector<float> &weight_bTagSF_eigenvars_B_down();
	const vector<float> &weight_bTagSF_eigenvars_C_down();
	const vector<float> &weight_bTagSF_eigenvars_Light_down();
	const float &weight_bTagSF_extrapolation_up();
	const float &weight_bTagSF_extrapolation_down();
	const float &weight_bTagSF_extrapolation_from_charm_up();
	const float &weight_bTagSF_extrapolation_from_charm_down();
	const unsigned int &eventNumber();
	const unsigned int &runNumber();
	const unsigned int &mcChannelNumber();
	const float &mu();
	const vector<float> &el_pt();
	const vector<float> &el_eta();
	const vector<float> &el_phi();
	const vector<float> &el_e();
	const vector<float> &el_charge();
	const vector<float> &el_topoetcone20();
	const vector<float> &el_ptvarcone20();
	const vector<float> &mu_pt();
	const vector<float> &mu_eta();
	const vector<float> &mu_phi();
	const vector<float> &mu_e();
	const vector<float> &mu_charge();
	const vector<float> &mu_topoetcone20();
	const vector<float> &mu_ptvarcone30();
	const vector<float> &jet_pt();
	const vector<float> &jet_eta();
	const vector<float> &jet_phi();
	const vector<float> &jet_e();
	const vector<float> &jet_mv1();
	const vector<float> &jet_mvb();
	const vector<float> &jet_mv1c();
	const vector<float> &jet_mv2c00();
	const vector<float> &jet_mv2c10();
	const vector<float> &jet_mv2c20();
	const vector<float> &jet_ip3dsv1();
	const vector<float> &jet_jvt();
	const vector<float> &ljet_pt();
	const vector<float> &ljet_eta();
	const vector<float> &ljet_phi();
	const vector<float> &ljet_e();
	const vector<float> &ljet_m();
	const vector<float> &ljet_sd12();
	const float &met_met();
	const float &met_phi();
	const int &sub_1b_2fj();
	const int &sub_1b_3fj();
	const int &sub_1b_allfj();
	const float &TotalEventWeight();
	const float &EventParticleWeight();
	const float &ScaleFactorWeight();
	const float &EventParameterWeight();
	const float &HT();
	const float &HhadT();
	const float &HT_ratio_met();
	const float &HT_ratio_lep();
	const float &meff();
	const float &Centrality();
	const float &MetSignificance();
	const float &MT2reco();
	const float &MCTreco();
	const float &dPhimin_met_jet();
	const float &dPhimin_met_lep();
	const float &dPhisumjetmet();
	const float &dPhisumjetlep();
	const float &dPhisumjetmetlep();
	const float &dRlj_MindR();
	const float &Mbb_MindR();
	const float &Mjj_MaxPt();
	const float &Mjjj_MaxPt();
	const float &Mbbb_MaxPt();
	const float &Mjjjj_MaxPt();
	const float &Mbbbb_MaxPt();
	const float &Mbbbj_MaxPt();
	const float &Mjjj_MaxMV2c20();
	const float &Mbbb_MaxMV2c20();
	const float &Mjjjj_MaxMV2c20();
	const float &Mbbbb_MaxMV2c20();
	const float &Mbbbj_MaxMV2c20();
	const float &DeltaMbbbb_MinDeltaM();
	const float &dR_lep_jet1();
	const float &dPhibl_MindPhi();
	const float &dRbl_MindR();
	const float &dPhibb_MindPhi();
	const float &dRbb_MindR();
	const float &PtDiff_Higgs_Vector();
	const int &el_n();
	const int &el_MT();
	const int &el_M();
	const int &mu_n();
	const int &mu_MT();
	const int &mu_M();
	const int &lep_n();
	const int &jet_n();
	const int &jet20_n();
	const int &jet30_n();
	const int &jet40_n();
	const int &bjet_n();
	const int &ljet_n();
	const vector<float> &ljet_width();
	const vector<float> &ljet_tau1();
	const vector<float> &ljet_tau2();
	const vector<float> &ljet_tau3();
	const vector<float> &ljet_tau1_wta();
	const vector<float> &ljet_tau2_wta();
	const vector<float> &ljet_tau3_wta();
	const vector<float> &ljet_planarFlow();
	const vector<float> &ljet_ktsplit12();
	const vector<float> &ljet_ktsplit23();
	const vector<float> &ljet_ktsplit34();
	const vector<float> &ljet_ZCut12();
	const vector<float> &ljet_ZCut23();
	const vector<float> &ljet_ZCut34();
	const vector<float> &ljet_KtDR();
	const vector<float> &ljet_Angularity();
	const vector<float> &ljet_Aplanarity();
	const vector<float> &ljet_Dip12();
	const vector<float> &ljet_Dip13();
	const vector<float> &ljet_Dip23();
	const vector<float> &ljet_D2();
	const vector<float> &ljet_C2();
	const vector<float> &ljet_tau21();
	const vector<float> &ljet_tau32();
	const vector<float> &ljet_tau31();
	const vector<float> &ljet_tau21_wta();
	const vector<float> &ljet_tau32_wta();
	const vector<float> &ljet_tau31_wta();
	const vector<int> &jet_truth_matching();
	const vector<int> &boosted_jet_truth_matching();
	const vector<int> &boosted_trackjet_truth_matching();
	const int &truth_nbquarks();
	const vector<int> &nbtag_tjets_truth();
	const vector<int> &nbtag_tjets_reco();
	const vector<int> &n_tjets_fat();
	const vector<int> &n_btjets_bfat();
	const vector<int> &n_btjets_fat();
	const vector<int> &n_tbtjets_fat();
	const vector<int> &n_tjets_subfat();
	const vector<float> &leadfat_leadtrack_pt();
	const vector<float> &leadfat_subtrack_pt();
	const float &higgs_mass();
	const vector<float> &b_pt();
	const vector<float> &notj_fj_pt();
	const vector<int> &n_1tbtjets_fat();
	const vector<int> &n_2tbtjets_fat();
	const vector<int> &n_1inc_tbtjets_fat();
	const vector<int> &n_2inc_tbtjets_fat();
	const vector<vector<int> > &trub_track_jets();
	const vector<vector<bool> > &tagb_track_jets();
	const int &nb();
	const vector<vector<int> > &trub_2track_jets();
	const vector<int> &btj();
	const vector<int> &tj_j();
	const vector<int> &btj_j();
	const vector<int> &b_j();
	const vector<int> &bh_j();
	const vector<float> &j_pt();
	const vector<float> &trackjet_pt();
	const vector<float> &dr_matched_jet_pt();
	const vector<vector<float> > &dr_matched_trackjet_pt();
	const vector<bool> &b_tag_jet();
	const vector<float> &fj_pt();
	const vector<int> &label_jet();
	const vector<vector<bool> > &btag_trackjet();
	const vector<vector<int> > &label_trackjet();
	const vector<int> &tj_fj();
	const vector<int> &bpart_fj();
	const vector<int> &label_fj();
	const vector<vector<float> > &ghost_dr_fj();
	const vector<vector<float> > &drmatch_dr_fj();
	const vector<vector<int> > &label_trackjet_fj();
	const vector<vector<bool> > &btag_trackjet_fj();
	const vector<int> &ghost_tj_fj();
	const vector<vector<float> > &fj_dr_matched_trackjet_pt();
	const vector<float> &tj_pt_check();
	const vector<float> &caloCluster_pt();
	const vector<float> &caloCluster_px();
	const vector<float> &caloCluster_py();
	const vector<float> &caloCluster_pz();
	const vector<float> &caloCluster_E();
	const vector<float> &caloCluster_EM_PROBABILITY();
	const vector<float> &caloCluster_ENG_BAD_CELLS();
	const vector<float> &caloCluster_ENG_FRAC_MAX();
	const vector<float> &caloCluster_ENG_POS();
	const vector<float> &caloCluster_FIRST_ENG_DES();
	const vector<float> &caloCluster_ISOLATION();
	const vector<float> &caloCluster_LATERAL();
	const vector<float> &caloCluster_LONGITUDINAL();
	const vector<float> &caloCluster_N_BAD_CELLS();
	const vector<float> &caloCluster_SECOND_LAMBDA();
	const vector<float> &caloCluster_SECOND_R();
	const vector<float> &caloCluster_SIGNIFICANCE();
	const vector<float> &caloCluster_altE();
	const vector<float> &caloCluster_altEta();
	const vector<float> &caloCluster_altM();
	const vector<float> &caloCluster_altPhi();
	const vector<float> &caloCluster_calE();
	const vector<float> &caloCluster_calEta();
	const vector<float> &caloCluster_calM();
	const vector<float> &caloCluster_calPhi();
	const vector<unsigned int> &caloCluster_clusterSize();
	const vector<float> &caloCluster_rawE();
	const vector<float> &caloCluster_rawEta();
	const vector<float> &caloCluster_rawM();
	const vector<float> &caloCluster_rawPhi();
	const vector<float> &caloCluster_time();
	const vector<float> &caloCluster_AVG_LAR_Q();
	const vector<float> &caloCluster_AVG_TILE_Q();
	const vector<float> &caloCluster_BADLARQ();
	const vector<float> &caloCluster_CELL_SIGNIFICANCE();
	const vector<float> &caloCluster_CELL_SIG_SAMPLING();
	const vector<float> &caloCluster_CENTER_LAMBDA();
	const vector<float> &caloCluster_CENTER_MAG();
	const vector<float> &track_pt();
	const vector<float> &track_px();
	const vector<float> &track_py();
	const vector<float> &track_pz();
	const vector<float> &track_E();
	const vector<float> &track_vz();
	const vector<float> &track_z0();
	const vector<float> &track_phi();
	const vector<unsigned char> &track_expectInnermostPixelLayerHit();
	const vector<unsigned char> &track_expectNextToInnermostPixelLayerHit();
	const vector<unsigned char> &track_numberOfInnermostPixelLayerHits();
	const vector<unsigned char> &track_numberOfNextToInnermostPixelLayerHits();
	const vector<float> &track_chiSquared();
	const vector<float> &track_d0();
	const vector<unsigned char> &track_numberOfPixelSharedHits();
	const vector<float> &track_numberDoF();
	const vector<unsigned char> &track_numberOfSCTSharedHits();
	const vector<unsigned char> &track_numberOfPhiHoleLayers();
	const vector<unsigned char> &track_numberOfPhiLayers();
	const vector<unsigned char> &track_numberOfPixelDeadSensors();
	const vector<unsigned char> &track_numberOfPixelHits();
	const vector<unsigned char> &track_numberOfPrecisionLayers();
	const vector<unsigned char> &track_numberOfSCTDeadSensors();
	const vector<unsigned char> &track_numberOfSCTHits();
	const vector<unsigned char> &track_numberOfSCTHoles();
	const vector<unsigned char> &track_numberOfTRTHits();
	const vector<unsigned char> &track_numberOfTRTOutliers();
	const vector<float> &track_qOverp();
	const vector<float> &track_theta();
	const vector<float> &track_vertex_x();
	const vector<float> &track_vertex_y();
	const vector<float> &track_vertex_z();
	const vector<short> &track_vertex_type();
	const vector<float> &primary_vertex_x();
	const vector<float> &primary_vertex_y();
	const vector<float> &primary_vertex_z();
	const vector<short> &primary_vertex_type();
	const vector<float> &a_pt();
	const vector<float> &mc_pt();
	const vector<float> &mc_eta();
	const vector<float> &mc_phi();
	const vector<float> &mc_e();
	const vector<int> &mc_pdgId();
	const vector<int> &mc_status();

  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern aa events;
#endif

namespace tas {
	const float &weight_mc();
	const float &weight_pileup();
	const float &weight_leptonSF();
	const float &weight_bTagSF();
	const float &weight_leptonSF_EL_SF_Trigger_UP();
	const float &weight_leptonSF_EL_SF_Trigger_DOWN();
	const float &weight_leptonSF_EL_SF_Reco_UP();
	const float &weight_leptonSF_EL_SF_Reco_DOWN();
	const float &weight_leptonSF_EL_SF_ID_UP();
	const float &weight_leptonSF_EL_SF_ID_DOWN();
	const float &weight_leptonSF_EL_SF_Isol_UP();
	const float &weight_leptonSF_EL_SF_Isol_DOWN();
	const float &weight_leptonSF_MU_SF_Trigger_STAT_UP();
	const float &weight_leptonSF_MU_SF_Trigger_STAT_DOWN();
	const float &weight_leptonSF_MU_SF_Trigger_SYST_UP();
	const float &weight_leptonSF_MU_SF_Trigger_SYST_DOWN();
	const float &weight_leptonSF_MU_SF_ID_STAT_UP();
	const float &weight_leptonSF_MU_SF_ID_STAT_DOWN();
	const float &weight_leptonSF_MU_SF_ID_SYST_UP();
	const float &weight_leptonSF_MU_SF_ID_SYST_DOWN();
	const float &weight_leptonSF_MU_SF_Isol_UP();
	const float &weight_leptonSF_MU_SF_Isol_DOWN();
	const float &weight_indiv_SF_EL_Trigger();
	const float &weight_indiv_SF_EL_Trigger_UP();
	const float &weight_indiv_SF_EL_Trigger_DOWN();
	const float &weight_indiv_SF_EL_Reco();
	const float &weight_indiv_SF_EL_Reco_UP();
	const float &weight_indiv_SF_EL_Reco_DOWN();
	const float &weight_indiv_SF_EL_ID();
	const float &weight_indiv_SF_EL_ID_UP();
	const float &weight_indiv_SF_EL_ID_DOWN();
	const float &weight_indiv_SF_EL_Isol();
	const float &weight_indiv_SF_EL_Isol_UP();
	const float &weight_indiv_SF_EL_Isol_DOWN();
	const float &weight_indiv_SF_MU_Trigger();
	const float &weight_indiv_SF_MU_Trigger_STAT_UP();
	const float &weight_indiv_SF_MU_Trigger_STAT_DOWN();
	const float &weight_indiv_SF_MU_Trigger_SYST_UP();
	const float &weight_indiv_SF_MU_Trigger_SYST_DOWN();
	const float &weight_indiv_SF_MU_ID();
	const float &weight_indiv_SF_MU_ID_STAT_UP();
	const float &weight_indiv_SF_MU_ID_STAT_DOWN();
	const float &weight_indiv_SF_MU_ID_SYST_UP();
	const float &weight_indiv_SF_MU_ID_SYST_DOWN();
	const float &weight_indiv_SF_MU_Isol();
	const float &weight_indiv_SF_MU_Isol_UP();
	const float &weight_indiv_SF_MU_Isol_DOWN();
	const vector<float> &weight_bTagSF_eigenvars_B_up();
	const vector<float> &weight_bTagSF_eigenvars_C_up();
	const vector<float> &weight_bTagSF_eigenvars_Light_up();
	const vector<float> &weight_bTagSF_eigenvars_B_down();
	const vector<float> &weight_bTagSF_eigenvars_C_down();
	const vector<float> &weight_bTagSF_eigenvars_Light_down();
	const float &weight_bTagSF_extrapolation_up();
	const float &weight_bTagSF_extrapolation_down();
	const float &weight_bTagSF_extrapolation_from_charm_up();
	const float &weight_bTagSF_extrapolation_from_charm_down();
	const unsigned int &eventNumber();
	const unsigned int &runNumber();
	const unsigned int &mcChannelNumber();
	const float &mu();
	const vector<float> &el_pt();
	const vector<float> &el_eta();
	const vector<float> &el_phi();
	const vector<float> &el_e();
	const vector<float> &el_charge();
	const vector<float> &el_topoetcone20();
	const vector<float> &el_ptvarcone20();
	const vector<float> &mu_pt();
	const vector<float> &mu_eta();
	const vector<float> &mu_phi();
	const vector<float> &mu_e();
	const vector<float> &mu_charge();
	const vector<float> &mu_topoetcone20();
	const vector<float> &mu_ptvarcone30();
	const vector<float> &jet_pt();
	const vector<float> &jet_eta();
	const vector<float> &jet_phi();
	const vector<float> &jet_e();
	const vector<float> &jet_mv1();
	const vector<float> &jet_mvb();
	const vector<float> &jet_mv1c();
	const vector<float> &jet_mv2c00();
	const vector<float> &jet_mv2c10();
	const vector<float> &jet_mv2c20();
	const vector<float> &jet_ip3dsv1();
	const vector<float> &jet_jvt();
	const vector<float> &ljet_pt();
	const vector<float> &ljet_eta();
	const vector<float> &ljet_phi();
	const vector<float> &ljet_e();
	const vector<float> &ljet_m();
	const vector<float> &ljet_sd12();
	const float &met_met();
	const float &met_phi();
	const int &sub_1b_2fj();
	const int &sub_1b_3fj();
	const int &sub_1b_allfj();
	const float &TotalEventWeight();
	const float &EventParticleWeight();
	const float &ScaleFactorWeight();
	const float &EventParameterWeight();
	const float &HT();
	const float &HhadT();
	const float &HT_ratio_met();
	const float &HT_ratio_lep();
	const float &meff();
	const float &Centrality();
	const float &MetSignificance();
	const float &MT2reco();
	const float &MCTreco();
	const float &dPhimin_met_jet();
	const float &dPhimin_met_lep();
	const float &dPhisumjetmet();
	const float &dPhisumjetlep();
	const float &dPhisumjetmetlep();
	const float &dRlj_MindR();
	const float &Mbb_MindR();
	const float &Mjj_MaxPt();
	const float &Mjjj_MaxPt();
	const float &Mbbb_MaxPt();
	const float &Mjjjj_MaxPt();
	const float &Mbbbb_MaxPt();
	const float &Mbbbj_MaxPt();
	const float &Mjjj_MaxMV2c20();
	const float &Mbbb_MaxMV2c20();
	const float &Mjjjj_MaxMV2c20();
	const float &Mbbbb_MaxMV2c20();
	const float &Mbbbj_MaxMV2c20();
	const float &DeltaMbbbb_MinDeltaM();
	const float &dR_lep_jet1();
	const float &dPhibl_MindPhi();
	const float &dRbl_MindR();
	const float &dPhibb_MindPhi();
	const float &dRbb_MindR();
	const float &PtDiff_Higgs_Vector();
	const int &el_n();
	const int &el_MT();
	const int &el_M();
	const int &mu_n();
	const int &mu_MT();
	const int &mu_M();
	const int &lep_n();
	const int &jet_n();
	const int &jet20_n();
	const int &jet30_n();
	const int &jet40_n();
	const int &bjet_n();
	const int &ljet_n();
	const vector<float> &ljet_width();
	const vector<float> &ljet_tau1();
	const vector<float> &ljet_tau2();
	const vector<float> &ljet_tau3();
	const vector<float> &ljet_tau1_wta();
	const vector<float> &ljet_tau2_wta();
	const vector<float> &ljet_tau3_wta();
	const vector<float> &ljet_planarFlow();
	const vector<float> &ljet_ktsplit12();
	const vector<float> &ljet_ktsplit23();
	const vector<float> &ljet_ktsplit34();
	const vector<float> &ljet_ZCut12();
	const vector<float> &ljet_ZCut23();
	const vector<float> &ljet_ZCut34();
	const vector<float> &ljet_KtDR();
	const vector<float> &ljet_Angularity();
	const vector<float> &ljet_Aplanarity();
	const vector<float> &ljet_Dip12();
	const vector<float> &ljet_Dip13();
	const vector<float> &ljet_Dip23();
	const vector<float> &ljet_D2();
	const vector<float> &ljet_C2();
	const vector<float> &ljet_tau21();
	const vector<float> &ljet_tau32();
	const vector<float> &ljet_tau31();
	const vector<float> &ljet_tau21_wta();
	const vector<float> &ljet_tau32_wta();
	const vector<float> &ljet_tau31_wta();
	const vector<int> &jet_truth_matching();
	const vector<int> &boosted_jet_truth_matching();
	const vector<int> &boosted_trackjet_truth_matching();
	const int &truth_nbquarks();
	const vector<int> &nbtag_tjets_truth();
	const vector<int> &nbtag_tjets_reco();
	const vector<int> &n_tjets_fat();
	const vector<int> &n_btjets_bfat();
	const vector<int> &n_btjets_fat();
	const vector<int> &n_tbtjets_fat();
	const vector<int> &n_tjets_subfat();
	const vector<float> &leadfat_leadtrack_pt();
	const vector<float> &leadfat_subtrack_pt();
	const float &higgs_mass();
	const vector<float> &b_pt();
	const vector<float> &notj_fj_pt();
	const vector<int> &n_1tbtjets_fat();
	const vector<int> &n_2tbtjets_fat();
	const vector<int> &n_1inc_tbtjets_fat();
	const vector<int> &n_2inc_tbtjets_fat();
	const vector<vector<int> > &trub_track_jets();
	const vector<vector<bool> > &tagb_track_jets();
	const int &nb();
	const vector<vector<int> > &trub_2track_jets();
	const vector<int> &btj();
	const vector<int> &tj_j();
	const vector<int> &btj_j();
	const vector<int> &b_j();
	const vector<int> &bh_j();
	const vector<float> &j_pt();
	const vector<float> &trackjet_pt();
	const vector<float> &dr_matched_jet_pt();
	const vector<vector<float> > &dr_matched_trackjet_pt();
	const vector<bool> &b_tag_jet();
	const vector<float> &fj_pt();
	const vector<int> &label_jet();
	const vector<vector<bool> > &btag_trackjet();
	const vector<vector<int> > &label_trackjet();
	const vector<int> &tj_fj();
	const vector<int> &bpart_fj();
	const vector<int> &label_fj();
	const vector<vector<float> > &ghost_dr_fj();
	const vector<vector<float> > &drmatch_dr_fj();
	const vector<vector<int> > &label_trackjet_fj();
	const vector<vector<bool> > &btag_trackjet_fj();
	const vector<int> &ghost_tj_fj();
	const vector<vector<float> > &fj_dr_matched_trackjet_pt();
	const vector<float> &tj_pt_check();
	const vector<float> &caloCluster_pt();
	const vector<float> &caloCluster_px();
	const vector<float> &caloCluster_py();
	const vector<float> &caloCluster_pz();
	const vector<float> &caloCluster_E();
	const vector<float> &caloCluster_EM_PROBABILITY();
	const vector<float> &caloCluster_ENG_BAD_CELLS();
	const vector<float> &caloCluster_ENG_FRAC_MAX();
	const vector<float> &caloCluster_ENG_POS();
	const vector<float> &caloCluster_FIRST_ENG_DES();
	const vector<float> &caloCluster_ISOLATION();
	const vector<float> &caloCluster_LATERAL();
	const vector<float> &caloCluster_LONGITUDINAL();
	const vector<float> &caloCluster_N_BAD_CELLS();
	const vector<float> &caloCluster_SECOND_LAMBDA();
	const vector<float> &caloCluster_SECOND_R();
	const vector<float> &caloCluster_SIGNIFICANCE();
	const vector<float> &caloCluster_altE();
	const vector<float> &caloCluster_altEta();
	const vector<float> &caloCluster_altM();
	const vector<float> &caloCluster_altPhi();
	const vector<float> &caloCluster_calE();
	const vector<float> &caloCluster_calEta();
	const vector<float> &caloCluster_calM();
	const vector<float> &caloCluster_calPhi();
	const vector<unsigned int> &caloCluster_clusterSize();
	const vector<float> &caloCluster_rawE();
	const vector<float> &caloCluster_rawEta();
	const vector<float> &caloCluster_rawM();
	const vector<float> &caloCluster_rawPhi();
	const vector<float> &caloCluster_time();
	const vector<float> &caloCluster_AVG_LAR_Q();
	const vector<float> &caloCluster_AVG_TILE_Q();
	const vector<float> &caloCluster_BADLARQ();
	const vector<float> &caloCluster_CELL_SIGNIFICANCE();
	const vector<float> &caloCluster_CELL_SIG_SAMPLING();
	const vector<float> &caloCluster_CENTER_LAMBDA();
	const vector<float> &caloCluster_CENTER_MAG();
	const vector<float> &track_pt();
	const vector<float> &track_px();
	const vector<float> &track_py();
	const vector<float> &track_pz();
	const vector<float> &track_E();
	const vector<float> &track_vz();
	const vector<float> &track_z0();
	const vector<float> &track_phi();
	const vector<unsigned char> &track_expectInnermostPixelLayerHit();
	const vector<unsigned char> &track_expectNextToInnermostPixelLayerHit();
	const vector<unsigned char> &track_numberOfInnermostPixelLayerHits();
	const vector<unsigned char> &track_numberOfNextToInnermostPixelLayerHits();
	const vector<float> &track_chiSquared();
	const vector<float> &track_d0();
	const vector<unsigned char> &track_numberOfPixelSharedHits();
	const vector<float> &track_numberDoF();
	const vector<unsigned char> &track_numberOfSCTSharedHits();
	const vector<unsigned char> &track_numberOfPhiHoleLayers();
	const vector<unsigned char> &track_numberOfPhiLayers();
	const vector<unsigned char> &track_numberOfPixelDeadSensors();
	const vector<unsigned char> &track_numberOfPixelHits();
	const vector<unsigned char> &track_numberOfPrecisionLayers();
	const vector<unsigned char> &track_numberOfSCTDeadSensors();
	const vector<unsigned char> &track_numberOfSCTHits();
	const vector<unsigned char> &track_numberOfSCTHoles();
	const vector<unsigned char> &track_numberOfTRTHits();
	const vector<unsigned char> &track_numberOfTRTOutliers();
	const vector<float> &track_qOverp();
	const vector<float> &track_theta();
	const vector<float> &track_vertex_x();
	const vector<float> &track_vertex_y();
	const vector<float> &track_vertex_z();
	const vector<short> &track_vertex_type();
	const vector<float> &primary_vertex_x();
	const vector<float> &primary_vertex_y();
	const vector<float> &primary_vertex_z();
	const vector<short> &primary_vertex_type();
	const vector<float> &a_pt();
	const vector<float> &mc_pt();
	const vector<float> &mc_eta();
	const vector<float> &mc_phi();
	const vector<float> &mc_e();
	const vector<int> &mc_pdgId();
	const vector<int> &mc_status();
}
#endif
